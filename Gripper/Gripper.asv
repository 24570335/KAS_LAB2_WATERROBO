classdef Gripper < RobotBaseClass

    properties(Access = public)   
        plyFileNameStem = 'Gripper'
    end
    
    methods
        %% Constructor
        function self = Gripper(baseTr)            
            if nargin < 3
                if nargin == 2
                    error('If you set useTool you must pass in the toolFilename as well');
                elseif nargin == 0 % Nothing passed
                    baseTr = transl(0,0,0);  
                end             
            else % All passed in 
                self.useTool = useTool;
                toolTrData = load([toolFilename,'.mat']);
                self.toolTr = toolTrData.tool;
                self.toolFilename = [toolFilename,'.ply'];
            end
          
            self.CreateModel();
            self.model.base = self.model.base.T * transl(0.17,1.6,0.99) * trotz(-pi/2);
            self.model.tool = self.toolTr;
            self.PlotAndColourRobot();
            drawnow
        end
        
        %% CreateModel
        function CreateModel(self)
            % top a = y, d = z, 
            % Link 1: Rotate by 90 degrees to align z-axis with y-axis
            link(1) = Link('revolute', 'd', 0, 'a', 0.1, 'alpha', 0, 'offset', 0, ...
                           'qlim', [deg2rad(-360), deg2rad(360)]);
            
            % bottom
            % Link 2: Prismatic joint to move along the new y-axis
            link(2) = Link('revolute', 'd', 0, 'a', 0.1, 'alpha', pi, 'offset', 0, ...
             %              'qlim', [deg2rad(-360), deg2rad(360)]);
          
            % Link 1: Prismatic joint that moves along the y-axis with an offset along x-axis
            link(1) = Link('prismatic', 'theta', 0, 'a', 0.1, 'alpha', 0, 'qlim', [0, 0.2]);
    
            % Link 2: Another prismatic joint aligned similarly for parallel movement
            link(2) = Link('prismatic', 'theta', 0, 'a', 0.1, 'alpha', pi, 'qlim', [0, 0.2]);
  
            % Combine links into SerialLink model
            self.model = SerialLink([link(1) link(2)], 'name', '2-Link with Y Movement');            
        end    

        %% InitiliseRobotPlot
        % First and only time to plot the robot
        function h = InitiliseRobotPlot(self)
            self.figure_h = gcf;
            self.axis_h = gca;
            initialSurfaceCount = self.CountTiledFloorSurfaces();
            
            % Display robot
            [ax, by] = view;
            
            % Calculate roughMinMax to define workspace safely for prismatic joints
            roughMinMax = sum(max(abs(self.model.d)) + max(abs(self.model.a)));
            self.workspace = [-roughMinMax roughMinMax -roughMinMax roughMinMax -0.01 roughMinMax]; 

            % Plot the robot in 3D
            self.model.plot3d(self.homeQ, 'noarrow', 'workspace', self.workspace, 'view', [ax, by]);

            % Check if a single surface has been added by plot3d
            if self.CountTiledFloorSurfaces() - initialSurfaceCount == 1
                self.surfaceAdded = true;
            end

            % Check if a light needs to be added
            if isempty(findobj(get(gca, 'Children'), 'Type', 'Light'))
                camlight
                self.lightAdded = true;
            end

            self.model.delay = 0;
            handles = findobj('Tag', self.model.name);
            h = get(handles, 'UserData');
        end
    end
end
